name: Laravel Docker CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: testing_db
          MYSQL_USER: testing_user
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: testing_db
      DB_USERNAME: testing_user
      DB_PASSWORD: secret
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: 127.0.0.1
      PUSHER_APP_ID: test
      PUSHER_APP_KEY: test
      PUSHER_APP_SECRET: test
      APP_ENV: testing
      APP_KEY: base64:SomeDummyAppKeyThatIsValidLength=

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Laravel dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.composer/cache
            ./vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Copy .env
        run: cp .env.example .env

      - name: Build Docker containers
        run: |
          docker-compose -f docker-compose.yml build

      - name: Start containers
        run: |
          docker-compose -f docker-compose.yml up -d mysql redis app
          sleep 15 # wait for MySQL to be ready

      - name: Run composer install
        run: docker exec laravel-app composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Run Laravel migrations
        run: docker exec laravel-app php artisan migrate --force

      - name: Run Laravel tests
        run: docker exec laravel-app php artisan test

      # Optional: Run Pint or PHPStan
      # - name: Run Laravel Pint
      #   run: docker exec laravel-app ./vendor/bin/pint

      # - name: Run PHPStan
      #   run: docker exec laravel-app ./vendor/bin/phpstan analyse

      - name: Tear down containers
        if: always()
        run: docker-compose down --volumes --remove-orphans
